actual = length(collatz(v[i]))
if (actual > mayorSecuencia){
mayorSecuencia = actual
}
}
A = matrix(0, length(v), mayorSecuencia)
for (i in 1:length(v)){
u = collatz(v[i])
print(c(u, replicate(mayorSecuencia - length(u), 0)))
A[,i] = c(u, replicate(mayorSecuencia - length(u), 0))
}
return(A)
}
matriz_collatz(c(6, 10, 11))
matriz_collatz <- function(v){
if (!is.vector(v)) return("El argumento debe ser un vector.")
mayorSecuencia = 0
for (i in 1:length(v)){
if (!is.numeric(v[i])) return("Todos los elementos del vector deben ser numeros.")
actual = length(collatz(v[i]))
if (actual > mayorSecuencia){
mayorSecuencia = actual
}
}
A = matrix(0, length(v), mayorSecuencia)
for (i in 1:length(v)){
u = collatz(v[i])
print(ncol(A))
A[,i] = c(u, replicate(mayorSecuencia - length(u), 0))
}
return(A)
}
matriz_collatz(c(6, 10, 11))
matriz_collatz <- function(v){
if (!is.vector(v)) return("El argumento debe ser un vector.")
mayorSecuencia = 0
for (i in 1:length(v)){
if (!is.numeric(v[i])) return("Todos los elementos del vector deben ser numeros.")
actual = length(collatz(v[i]))
if (actual > mayorSecuencia){
mayorSecuencia = actual
}
}
A = matrix(0, length(v), mayorSecuencia)
for (i in 1:length(v)){
u = collatz(v[i])
A[,i] = c(1:15)
}
return(A)
}
matriz_collatz(c(6, 10, 11))
matriz_collatz <- function(v){
if (!is.vector(v)) return("El argumento debe ser un vector.")
mayorSecuencia = 0
for (i in 1:length(v)){
if (!is.numeric(v[i])) return("Todos los elementos del vector deben ser numeros.")
actual = length(collatz(v[i]))
if (actual > mayorSecuencia){
mayorSecuencia = actual
}
}
A = matrix(0, length(v), mayorSecuencia)
for (i in 1:length(v)){
u = collatz(v[i])
A[i,] = c(u, replicate(mayorSecuencia - length(u), 0))
}
return(A)
}
matriz_collatz(c(6, 10, 11))
matriz_collatz <- function(v){
if (!is.vector(v)) return("El argumento debe ser un vector.")
mayorSecuencia = 0
for (i in 1:length(v)){
if (!is.numeric(v[i])) return("Todos los elementos del vector deben ser numeros.")
actual = length(collatz(v[i]))
if (actual > mayorSecuencia){
mayorSecuencia = actual
}
}
A = matrix(0, length(v), mayorSecuencia)
for (i in 1:length(v)){
u = collatz(v[i])
print(A[i, ])
A[i,] = c(u, replicate(mayorSecuencia - length(u), 0))
}
return(A)
}
matriz_collatz(c(6, 10, 11))
matriz_collatz <- function(v){
if (!is.vector(v)) return("El argumento debe ser un vector.")
mayorSecuencia = 0
for (i in 1:length(v)){
if (!is.numeric(v[i])) return("Todos los elementos del vector deben ser numeros.")
actual = length(collatz(v[i]))
if (actual > mayorSecuencia){
mayorSecuencia = actual
}
}
A = matrix(0, length(v), mayorSecuencia)
for (i in 1:nrow(A)){
u = collatz(v[i])
A[i,] = c(u, replicate(mayorSecuencia - length(u), 0))
}
return(A)
}
matriz_collatz(c(6, 10, 11))
matriz_collatz <- function(v){
if (!is.vector(v)) return("El argumento debe ser un vector.")
mayorSecuencia = 0
for (i in 1:length(v)){
if (!is.numeric(v[i])) return("Todos los elementos del vector deben ser numeros.")
actual = length(collatz(v[i]))
if (actual > mayorSecuencia){
mayorSecuencia = actual
}
}
A = matrix(0, length(v), mayorSecuencia)
for (i in 1:length(v)){
u = collatz(v[i])
A[i,] = c(u, replicate(mayorSecuencia - length(u), 0))
}
print(A[, 1])
return("A")
}
matriz_collatz(c(6, 10, 11))
matriz_collatz <- function(v){
if (!is.vector(v)) return("El argumento debe ser un vector.")
mayorSecuencia = 0
for (i in 1:length(v)){
if (!is.numeric(v[i])) return("Todos los elementos del vector deben ser numeros.")
actual = length(collatz(v[i]))
if (actual > mayorSecuencia){
mayorSecuencia = actual
}
}
A = matrix(0, length(v), mayorSecuencia)
for (i in 1:length(v)){
u = collatz(v[i])
A[i, ] = c(u, replicate(mayorSecuencia - length(u), 0))
}
print(A[, 1])
return("A")
}
matriz_collatz(c(6, 10, 11))
A = matrix(1:6, 2, 3)
print(A)
A[i,]
A[,1]
matriz_collatz <- function(v){
if (!is.vector(v)) return("El argumento debe ser un vector.")
mayorSecuencia = 0
for (i in 1:length(v)){
if (!is.numeric(v[i])) return("Todos los elementos del vector deben ser numeros.")
actual = length(collatz(v[i]))
if (actual > mayorSecuencia){
mayorSecuencia = actual
}
}
A = matrix(0, length(v), mayorSecuencia)
for (i in 1:length(v)){
u = collatz(v[i])
A[i, ] = c(u, replicate(mayorSecuencia - length(u), 0))
}
print(A[, 1])
return("A")
}
matriz_collatz(c(6, 10, 11))
matriz_collatz <- function(v){
if (!is.vector(v)) return("El argumento debe ser un vector.")
mayorSecuencia = 0
for (i in 1:length(v)){
if (!is.numeric(v[i])) return("Todos los elementos del vector deben ser numeros.")
actual = length(collatz(v[i]))
if (actual > mayorSecuencia){
mayorSecuencia = actual
}
}
A = matrix(0, length(v), mayorSecuencia)
print(A[, 1])
for (i in 1:length(v)){
u = collatz(v[i])
A[i, ] = c(u, replicate(mayorSecuencia - length(u), 0))
}
print(A[, 1])
return("A")
}
matriz_collatz(c(6, 10, 11))
matriz_collatz <- function(v){
if (!is.vector(v)) return("El argumento debe ser un vector.")
mayorSecuencia = 0
for (i in 1:length(v)){
if (!is.numeric(v[i])) return("Todos los elementos del vector deben ser numeros.")
actual = length(collatz(v[i]))
if (actual > mayorSecuencia){
mayorSecuencia = actual
}
}
A = matrix(0, length(v), mayorSecuencia)
print(A[1,])
for (i in 1:length(v)){
u = collatz(v[i])
A[i, ] = c(u, replicate(mayorSecuencia - length(u), 0))
}
print(A[, 1])
return("A")
}
matriz_collatz(c(6, 10, 11))
matriz_collatz <- function(v){
if (!is.vector(v)) return("El argumento debe ser un vector.")
# Primero obtengo cual es la mayor secuencia de collatz de los numeros del vector.
mayorSecuencia = 0
for (i in 1:length(v)){
if (!is.numeric(v[i])) return("Todos los elementos del vector deben ser numeros.")
actual = length(collatz(v[i]))
if (actual > mayorSecuencia){
mayorSecuencia = actual
}
}
# Ahora puedo armar una matriz, donde la cantidad de filas son la longitud de v,
# y la cantidad de columnas es la longitud de la mayor secuencia de collatz.
A = matrix(0, length(v), mayorSecuencia)
for (i in 1:length(v)){
u = collatz(v[i])
A[i,] = c(u, replicate(mayorSecuencia - length(u), 0))
print(A[i, ])
}
return(A)
}
matriz_collatz(c(6, 10, 11))
matriz_collatz <- function(v){
if (!is.vector(v)) return("El argumento debe ser un vector.")
# Primero obtengo cual es la mayor secuencia de collatz de los numeros del vector.
mayorSecuencia = 0
for (i in 1:length(v)){
if (!is.numeric(v[i])) return("Todos los elementos del vector deben ser numeros.")
actual = length(collatz(v[i]))
if (actual > mayorSecuencia){
mayorSecuencia = actual
}
}
# Ahora puedo armar una matriz, donde la cantidad de filas son la longitud de v,
# y la cantidad de columnas es la longitud de la mayor secuencia de collatz.
A = matrix(0, length(v), mayorSecuencia)
for (i in 1:length(v)){
u = collatz(v[i])
cantCeros = mayorSecuencia - length(u)
if (cantCeros > 0){
u = append(u, replicate(cantCeros, 0))
}
A[i,] = u
}
return(A)
}
matriz_collatz(c(6, 10, 11))
replicate(0, 1)
replicate(2, 1)
matriz_collatz <- function(v){
if (!is.vector(v)) return("El argumento debe ser un vector.")
# Primero obtengo cual es la mayor secuencia de collatz de los numeros del vector.
mayorSecuencia = 0
for (i in 1:length(v)){
if (!is.numeric(v[i])) return("Todos los elementos del vector deben ser numeros.")
actual = length(collatz(v[i]))
if (actual > mayorSecuencia){
mayorSecuencia = actual
}
}
# Ahora puedo armar una matriz, donde la cantidad de filas son la longitud de v,
# y la cantidad de columnas es la longitud de la mayor secuencia de collatz.
A = matrix(0, length(v), mayorSecuencia)
for (i in 1:length(v)){
u = collatz(v[i])
cantCeros = mayorSecuencia - length(u)
if (cantCeros > 0){
u = append(u, replicate(cantCeros, 0))
}
A[i,] = u
}
return(A)
}
matriz_collatz(c(6, 10, 11))
distancia <- function(v, w){
if (!is.vector(v) || !is.vector(w)) return("Los argumentos deben ser vectores")
# Obtengo los puntos a partir de los vectores.
x1 = v[1]
y1 = v[2]
x2 = w[1]
y2 = w[2]
if (!is.numeric(x1) || !is.numeric(x2) || !is.numeric(y1) || !is.numeric(y2))
return("Los elementos de los vectores deben ser numeros.")
# Calculo la distancia...
return(sqrt((x1 - x2)^2 + (y1-y2)^2))
}
mas_cercano <- function(a, b, c, d, e){
if (!is.vector(a) || !is.vector(b) || !is.vector(c) || !is.vector(d) || !is.vector(e))
return("Los argumentos deben ser vectores")
# Obtengo la abcisa y ordenada del punto a.
abcisa = a[1]
ordenada = a[2]
# Establezco, inicialmente, que el punto mas cercano es el b.
vectorMasCercano = b
menorDistancia = distancia(a, vectorMasCercano)
# Creo una matriz con el resto de puntos.
A = matrix(c(c, d, e), 3, 2)
for (i in 1:nrow(A)){
distanciaAux = distancia(a, A[i, ])
if (distanciaAux < menorDistancia){
menorDistancia = distanciaAux
vectorMasCercano = A[i, ]
}
}
cat("El vector mas cercano es ", vectorMasCercano)
}
mas_cercano(c(1,2), c(1,5), c(10,1), c(9,5), c(3, 6))
mas_cercano <- function(a, b, c, d, e){
if (!is.vector(a) || !is.vector(b) || !is.vector(c) || !is.vector(d) || !is.vector(e))
return("Los argumentos deben ser vectores")
# Obtengo la abcisa y ordenada del punto a.
abcisa = a[1]
ordenada = a[2]
# Establezco, inicialmente, que el punto mas cercano es el b.
vectorMasCercano = b
menorDistancia = distancia(a, vectorMasCercano)
# Creo una matriz con el resto de puntos.
A = matrix(c(c, d, e), 3, 2)
# Recorro todos los puntos para obtener el mas cercano.
for (i in 1:nrow(A)){
distanciaAux = distancia(a, A[i, ])
if (distanciaAux < menorDistancia){
menorDistancia = distanciaAux
vectorMasCercano = A[i, ]
}
}
cat("El vector mas cercano es ", vectorMasCercano, "\n")
return(vectorMasCercano)
}
mas_cercano(c(1,2), c(1,5), c(10,1), c(9,5), c(3, 6))
mas_cercano <- function(a, b, c, d, e){
if (!is.vector(a) || !is.vector(b) || !is.vector(c) || !is.vector(d) || !is.vector(e))
return("Los argumentos deben ser vectores")
# Obtengo la abcisa y ordenada del punto a.
abcisa = a[1]
ordenada = a[2]
# Establezco, inicialmente, que el punto mas cercano es el b.
vectorMasCercano = b
menorDistancia = distancia(a, vectorMasCercano)
# Creo una matriz con el resto de puntos.
A = matrix(c(c, d, e), 3, 2)
# Recorro todos los puntos para obtener el mas cercano.
for (i in 1:nrow(A)){
distanciaAux = distancia(a, A[i, ])
if (distanciaAux < menorDistancia){
menorDistancia = distanciaAux
vectorMasCercano = A[i, ]
}
}
cat("El vector mas cercano es ")
return(vectorMasCercano)
}
mas_cercano(c(1,2), c(1,5), c(10,1), c(9,5), c(3, 6))
mas_cercano <- function(a, b, c, d, e){
if (!is.vector(a) || !is.vector(b) || !is.vector(c) || !is.vector(d) || !is.vector(e))
return("Los argumentos deben ser vectores")
# Obtengo la abcisa y ordenada del punto a.
abcisa = a[1]
ordenada = a[2]
# Establezco, inicialmente, que el punto mas cercano es el b.
vectorMasCercano = b
menorDistancia = distancia(a, vectorMasCercano)
# Creo una matriz con el resto de puntos.
A = matrix(c(c, d, e), 3, 2)
# Recorro todos los puntos para obtener el mas cercano.
for (i in 1:nrow(A)){
distanciaAux = distancia(a, A[i, ])
if (distanciaAux < menorDistancia){
menorDistancia = distanciaAux
vectorMasCercano = A[i, ]
}
}
cat("El vector mas cercano es ", vectorMasCercano, "\n")
return(vectorMasCercano)
}
mas_cercano(c(1,2), c(1,5), c(10,1), c(9,5), c(3, 6))
mas_cercano <- function(a, b, c, d, e){
if (!is.vector(a) || !is.vector(b) || !is.vector(c) || !is.vector(d) || !is.vector(e))
return("Los argumentos deben ser vectores")
# Obtengo la abcisa y ordenada del punto a.
abcisa = a[1]
ordenada = a[2]
# Establezco, inicialmente, que el punto mas cercano es el b.
vectorMasCercano = b
menorDistancia = distancia(a, vectorMasCercano)
# Creo una matriz con el resto de puntos.
A = matrix(c(c, d, e), 3, 2, byrow = TRUE)
# Recorro todos los puntos para obtener el mas cercano.
for (i in 1:nrow(A)){
distanciaAux = distancia(a, A[i, ])
if (distanciaAux < menorDistancia){
menorDistancia = distanciaAux
vectorMasCercano = A[i, ]
}
}
cat("El vector mas cercano es ", vectorMasCercano, "\n")
return(vectorMasCercano)
}
mas_cercano(c(1,2), c(1,5), c(10,1), c(9,5), c(3, 6))
print(letters)
mensaje_oculto <- function(v){
if (!is.vector(v)) return("El argumento debe ser un vector")
if (!esEnteroYPositivo(v) ) return("el vector debe ser entero y positivo.")
w = c()
cantVocales = 0
for (i in 1:length(v)){
w[i] = letters[v[i]]
}
cat("Cantidad de vocales: ", cantVocales, ". Cant de consonantes: ", length(w) - cantVocales)
return(w)
}
mensaje_oculto(c(13, 5, 12, 9, 20, 5, 1, 13, 15))
mensaje_oculto <- function(v){
if (!is.vector(v)) return("El argumento debe ser un vector")
if (!esEnteroYPositivo(v) ) return("el vector debe ser entero y positivo.")
w = c()
cantVocales = 0
for (i in 1:length(v)){
w[i] = letters[v[i]]
}
cat("Cantidad de vocales: ", cantVocales, ". Cant de consonantes: ", length(w) - cantVocales, "\n")
return(w)
}
mensaje_oculto(c(13, 5, 12, 9, 20, 5, 1, 13, 15))
es_vocal <- function(x){
vocales = c('a', 'e', 'i', 'o', 'u')
# Si el vector vocales contiene el elemento x devuelve true. Sino false.
for (i in 1:length(vocales)){
if (x == vocales[i]) return(TRUE)
}
return(FALSE)
}
mensaje_oculto <- function(v){
if (!is.vector(v)) return("El argumento debe ser un vector")
if (!esEnteroYPositivo(v) ) return("el vector debe ser entero y positivo.")
w = c()
cantVocales = 0
for (i in 1:length(v)){
w[i] = letters[v[i]]
if (es_vocal(w[i])) cantVocales = cantVocales + 1
}
cat("Cantidad de vocales: ", cantVocales, ". Cant de consonantes: ", length(w) - cantVocales, "\n")
return(w)
}
mensaje_oculto(c(13, 5, 12, 9, 20, 5, 1, 13, 15))
mensaje_oculto(c(13, 1, 20, 9, 1, 21, 1, 13, 15))
mensaje_oculto(c(13, 1, 20, 9, 1, 19, 1, 13, 15))
mensaje_oculto(c(13, 1, 20, 18, , 19, 1, 13, 15))
mensaje_oculto(c(13, 1, 20, 18, 15, 19, 1, 13, 15))
mensaje_oculto(c(13, 1, 20, 9, 18, 15, 19, 1, 13, 15))
mensaje_oculto(c(13, 1, 20, 9, 18, 15, 19, 5, 13))
mensaje_oculto(c(13, 1, 20, 9, 18, 15, 19, 5, 14))
es_vocal <- function(x){
vocales = c('a', 'e', 'i', 'o', 'u')
# Si el vector vocales contiene el elemento x devuelve true. Sino false.
for (i in 1:length(vocales)){
if (x == vocales[i]) return(TRUE)
}
return(FALSE)
}
mensaje_oculto <- function(v){
if (!is.vector(v)) return("El argumento debe ser un vector")
if (!esEnteroYPositivo(v) ) return("el vector debe ser entero y positivo.")
w = c()
cantVocales = 0
for (i in 1:length(v)){
w[i] = letters[v[i]]
if (es_vocal(w[i])) cantVocales = cantVocales + 1
}
cat("Cantidad de vocales: ", cantVocales, ". Cant de consonantes: ", length(w) - cantVocales, "\n")
return(w)
}
mensaje_oculto(c(13, 1, 20, 9, 18, 15, 19, 5, 14))
letters(26)
letters(26)
letter(26)
letters[26]
es_vocal <- function(x){
vocales = c('a', 'e', 'i', 'o', 'u')
# Si el vector vocales contiene el elemento x devuelve true. Sino false.
for (i in 1:length(vocales)){
if (x == vocales[i]) return(TRUE)
}
return(FALSE)
}
mensaje_oculto <- function(v){
if (!is.vector(v)) return("El argumento debe ser un vector")
if (!esEnteroYPositivo(v) ) return("el vector debe ser entero y positivo.")
w = c()
cantVocales = 0
# Recorremos el vector y obtenemos que letra representa cada numero, usando el vector
# letters. Ademas comprobamos que el numero sea menor o igual a 26
for (i in 1:length(v)){
if (v[i] > 26) return("El numero debe ser menor a 26.")
w[i] = letters[v[i]]
if (es_vocal(w[i])) cantVocales = cantVocales + 1
}
cat("Cantidad de vocales: ", cantVocales, ". Cant de consonantes: ", length(w) - cantVocales, "\n")
return(w)
}
mensaje_oculto(c(13, 1, 20, 9, 18, 15, 19, 5, 14, 26))
mensaje_oculto(c(13, 1, 20, 9, 18, 15, 19, 5, 14, 27))
mensaje_oculto(c(13, 1, 20, 9, 18, 15, 19, 5, 14))
mensaje_oculto(c(13, 1, 20, 9, 18, 15, 19, 5, 14, 0))
mensaje_oculto(c(13, 1, 20, 9, 18, 15, 19, 5, 14))
